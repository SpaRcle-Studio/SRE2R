ShaderType Text;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled true;
DepthWrite true;
DepthTest true;

[[shared]] vec2 uv;

void fragment() {
    COLOR = texture(TEXT_ATLAS_TEXTURE, uv);

    if (COLOR.a == 0) {
        discard;
    }
}

void vertex() {
     vec3[6] text_points = {
        vec3(TEXT_RECT_X, TEXT_RECT_Y, 0.0),
        vec3(TEXT_RECT_X + TEXT_RECT_WIDTH, TEXT_RECT_Y + TEXT_RECT_HEIGHT, 0.0),
        vec3(TEXT_RECT_X + TEXT_RECT_WIDTH, TEXT_RECT_Y, 0.0),

        vec3(TEXT_RECT_X, TEXT_RECT_Y + TEXT_RECT_HEIGHT, 0.0),
        vec3(TEXT_RECT_X + TEXT_RECT_WIDTH, TEXT_RECT_Y + TEXT_RECT_HEIGHT, 0.0),
        vec3(TEXT_RECT_X, TEXT_RECT_Y, 0.0),
    }

    vec2[6] text_uv = {
        vec2(0.0, 0.0),
        vec2(1.0, 1.0),
        vec2(1.0, 0.0),

        vec2(0.0, 1.0),
        vec2(1.0, 1.0),
        vec2(0.0, 0.0),
    }

    uv = text_uv[VERTEX_INDEX];
    uv = vec2(uv.x, 1.0 - uv.y);

    OUT_POSITION = PROJECTION_MATRIX * VIEW_MATRIX * MODEL_MATRIX * vec4(text_points[VERTEX_INDEX], 1.0);
}