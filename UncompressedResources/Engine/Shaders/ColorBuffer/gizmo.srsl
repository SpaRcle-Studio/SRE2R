ShaderType Spatial;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled true;
DepthWrite true;
DepthTest false;

[[uniform], [public]] bool useOrthogonal;

void fragment() {
	COLOR = vec4(COLOR_BUFFER_VALUE, 1.0);
}

void vertex() {
    if (useOrthogonal == 1) {
        OUT_POSITION = ORTHOGONAL_MATRIX * MODEL_MATRIX * vec4(VERTEX + vec3(0, 0, 5), 1.0);
    }
    else {
        OUT_POSITION = PROJECTION_MATRIX * VIEW_MATRIX * MODEL_MATRIX * vec4(VERTEX, 1.0);
    }
}
