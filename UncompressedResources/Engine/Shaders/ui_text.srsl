ShaderType TextUI;

PolygonMode Fill;
CullMode None;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled true;
DepthWrite true;
DepthTest true;

[[shared]] vec2 uv;
[[uniform], [public]] vec3 color;

void fragment() {
    if (COLOR_BUFFER_MODE == 1) {
        COLOR = vec4(COLOR_BUFFER_VALUE, 1.0);
    }
    else {
        COLOR = texture(TEXT_ATLAS_TEXTURE, uv);

        if (COLOR.a < 0.8) {
            discard;
        }
        else {
            COLOR.rgb += color;
        }
    }
}

void vertex() {
     vec3[6] text_points = {
        vec3(TEXT_RECT_X, TEXT_RECT_Y, 0.0),
        vec3(TEXT_RECT_X + TEXT_RECT_WIDTH, TEXT_RECT_Y + TEXT_RECT_HEIGHT, 0.0),
        vec3(TEXT_RECT_X + TEXT_RECT_WIDTH, TEXT_RECT_Y, 0.0),

        vec3(TEXT_RECT_X, TEXT_RECT_Y + TEXT_RECT_HEIGHT, 0.0),
        vec3(TEXT_RECT_X + TEXT_RECT_WIDTH, TEXT_RECT_Y + TEXT_RECT_HEIGHT, 0.0),
        vec3(TEXT_RECT_X, TEXT_RECT_Y, 0.0),
    }

    vec2[6] text_uv = {
        vec2(0.0, 1.0),
        vec2(1.0, 0.0),
        vec2(1.0, 1.0),

        vec2(0.0, 0.0),
        vec2(1.0, 0.0),
        vec2(0.0, 1.0),
    }

    uv = text_uv[VERTEX_INDEX];

    OUT_POSITION = ORTHOGONAL_MATRIX * MODEL_MATRIX * vec4(text_points[VERTEX_INDEX], 1.0);
}