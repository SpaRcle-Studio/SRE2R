ShaderType PostProcessing;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled false;
DepthWrite false;
DepthTest false;

[[uniform]] sampler2D ssao;

[[uniform]] sampler2D gAlbedo;
[[uniform]] sampler2D gNormal;
[[uniform]] sampler2D gPosition;

[[shared]] vec2 uv;

[[const]] float LightLinear = 0.09;
[[const]] float LightQuadratic = 0.032;
[[const]] vec3 LightPosition = vec3(2.0, 4.0, -2.0);
[[const]] vec3 LightColor = vec3(0.2, 0.2, 0.2);

void fragment() {
    /// lightning
    vec3 FragPos = texture(gPosition, uv).rgb;
    vec3 Normal = texture(gNormal, uv).rgb;
    vec3 Diffuse = texture(gAlbedo, uv).rgb;
    float AmbientOcclusion = texture(ssao, uv).r;

    // then calculate lighting as usual
    vec3 ambient = vec3(1.2 * Diffuse * AmbientOcclusion);
    vec3 lighting = ambient;
    vec3 viewDir = normalize(-FragPos); // viewpos is (0.0.0)
    // diffuse
    vec3 lightDir = normalize(LightPosition - FragPos);
    vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Diffuse * LightColor;
    // specular
    vec3 halfwayDir = normalize(lightDir + viewDir);
    float spec = pow(max(dot(Normal, halfwayDir), 0.0), 8.0);
    vec3 specular = LightColor * spec;
    // attenuation
    float distance = length(LightPosition - FragPos);
    float attenuation = 1.0 / (1.0 + LightLinear * distance + LightQuadratic * distance * distance);
    diffuse *= attenuation;
    specular *= attenuation;
    lighting += diffuse + specular;

    /// vignette
    float r = length(uv - 0.5);
    lighting *= smoothstep(r - 0.65, r + 0.1, 0.5);

    COLOR_INDEX_0 = vec4(lighting, 1.0);
}

void vertex() {
    uv = vec2((VERTEX_INDEX << 1) & 2, VERTEX_INDEX & 2);
    OUT_POSITION = vec4(uv * 2.0 - 1.0, 0.0, 1.0);
}