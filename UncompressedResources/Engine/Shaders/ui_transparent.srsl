ShaderType Canvas;

PolygonMode Fill;
CullMode None;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled true;
DepthWrite false;
DepthTest false;

[[uniform], [public]] vec4 color;
[[uniform], [public]] sampler2D diffuse;

void fragment() {
	COLOR = texture(diffuse, vec2(1.0 - UV.x, 1.0 - UV.y)) * color;

    if (COLOR.a == 0) {
        discard;
    }
}

void vertex() {
    OUT_POSITION = ORTHOGONAL_MATRIX * MODEL_MATRIX * vec4(VERTEX, 1.0);
}