ShaderType Spatial;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled false; 
DepthWrite true;
DepthTest true;

[[uniform], [public]] vec4 color;
[[uniform], [public]] sampler2D diffuse;

void fragment() {
    vec3 diffuse_albedo = texture(diffuse, UV).rgb * color.rgb;

    vec3 normalShade = vec3(NORMAL.x + NORMAL.y + NORMAL.z) / 8.0;

	COLOR = vec4(diffuse_albedo + normalShade, 1.0);
    COLOR_INDEX_1 = vec4(vec3(0), 0.0);
    COLOR_INDEX_2 = vec4(vec3(0), 0.0);
}

void vertex() {
    OUT_POSITION = PROJECTION_MATRIX * VIEW_MATRIX * MODEL_MATRIX * vec4(VERTEX, 1.0);
}