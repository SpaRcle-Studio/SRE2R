ShaderType PostProcessing;

PolygonMode Fill;
CullMode Back;
DepthCompare LessOrEqual;
PrimitiveTopology TriangleList;
BlendEnabled false;
DepthWrite false;
DepthTest false;

[[uniform]] sampler2D image;
[[shared]] vec2 uv;

void fragment() {
    vec2 texelSize = 1.0 / vec2(textureSize(image, 0));

    vec4 result = vec4(0.0);

    for (int x = -2; x <= 2; ++x) {
        for (int y = -2; y <= 2; ++y) {
            vec2 offset = vec2(float(x), float(y)) * texelSize;
            result += texture(image, uv + offset);
        }
    }

    COLOR_INDEX_0 = vec4(vec3(result / 25.0), 1.0);
}

void vertex() {
    uv = vec2((VERTEX_INDEX << 1) & 2, VERTEX_INDEX & 2);
    OUT_POSITION = vec4(uv * 2.0 - 1.0, 0.0, 1.0);
}